<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>준모의 개발 노트</title><link>http://jmpark6846.github.io/</link><description>Recent content on 준모의 개발 노트</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Dec 2022 15:59:31 +0900</lastBuildDate><atom:link href="http://jmpark6846.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>자료구조 간단 정리</title><link>http://jmpark6846.github.io/posts/data-structure-review/</link><pubDate>Sat, 24 Dec 2022 15:59:31 +0900</pubDate><guid>http://jmpark6846.github.io/posts/data-structure-review/</guid><description>자료구조 간단 정리 Array 여러개의 데이터를 저장할 수 있는 자료형 선언할 때 고정된 크기로 선언한다. 이후에 변경할 수 없다. 인덱스로 데이터에 접근하면 O(1)이다. List 배열과 마찬가지로 여러개의 데이터를 저장할 수 있으나 크기가 고정되지 않아 자유롭게 추가하거나 삭제할 수 있다. 대표적으로 ArrayList와 LinkedList가 있다. 둘은 논리적, 물리적 저장 순서가 일치하느냐의 차이이다. ArrayList 논리적, 물리적 저장순서가 일치한다. 즉 일반 배열 처럼 데이터가 메모리상에 인접하여 저장된다. 인덱스로 데이터에 접근하면 O(1)이다. 삽입, 삭제 시 기존 원소들을 삽입, 삭제된 원소 갯수 만큼 이동시켜야하므로 O(n)의 시간이 걸린다.</description></item></channel></rss>